---
title: "Macbeth"
description: |
  Analysis of Shakespeare Dialogue Dataset from TidyTuesday
format: html
execute:
  warning: false
  message: false
---

This dataset contains the full script of the famous Shakespearean play *Macbeth*. As a side note, I was really into acting back in middle school and actually played a character (whose name I’ve forgotten—it wasn’t a major role) in *Macbeth* during one of our school productions. I’m excited to revisit the play from a data perspective—let’s dive in!

## Let’s Look at the Data

```{r}
# Load required libraries
library(dplyr)
library(tidyverse)

# Read the Macbeth dialogue data
macbeth <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-09-17/macbeth.csv')

# Display first few rows
head(macbeth)
```

Each observation in this dataset is a line of dialogue (excluding stage directions) from a character in the play. The dataset is arranged in the same order as the original script.

## Negative Words vs. String Length

```{r}
# Count lines per act containing "negative" words
neg_lines <- macbeth |>
  mutate(blood = str_detect(dialogue, "(?i)blood|(?i)murder|(?i)death|(?i)kill")) |>
  filter(blood) |>
  group_by(act) |>
  summarize(negative_lines_per_act = n())

# Compute average string length per act
average_character <- macbeth |>
  mutate(string_length = str_length(dialogue)) |>
  group_by(act) |>
  summarize(average_character = mean(string_length))

# Merge summaries
negative_words <- left_join(neg_lines, average_character)

# Plot relationship
ggplot(negative_words, aes(x = average_character, y = negative_lines_per_act, label = act)) +
  geom_point(color = "blue", size = 3) +
  geom_text(vjust = -1, size = 3) +
  labs(
    x = "Average String Length",
    y = "Total Negative Lines",
    title = "Negative Lines vs. Average String Length by Act",
    alt = "A scatter plot with average dialogue length on the x-axis and number of negative lines on the y-axis, labeled by act"
  ) +
  theme_minimal()
```

Figure 1. Negative Lines vs. Average String Length by Act This scatter plot explores whether acts with more negatively worded lines (blood, murder, death, kill) tend to feature shorter or longer lines on average. It appears there's a slight negative trend—suggesting that darker scenes may include shorter dialogue.

I defined negative words as any line containing “blood”, “murder”, “death”, or “kill”. I then counted the number of such lines in each act and compared that count to the average length of lines in the same act. This plot shows a slight negative relationship, which might imply that characters use shorter sentences in darker scenes. However, it could also be that some acts are longer overall and have more dialogue, which inflates the negative line count. Let's control for act length next.

## Average Negative Lines per Act

```{r}
#| code-fold: true
#| code-summary: "Get Average Negative Lines"
#| code-fold-default: true

# Calculate average presence of negative words per act
neg_lines <- macbeth |>
  mutate(blood = str_detect(dialogue, "(?i)blood|(?i)murder|(?i)death|(?i)kill")) |>
  group_by(act) |>
  summarize(avg_negative_lines_per_act = mean(blood))

# Join with average string length data
negative_words <- left_join(neg_lines, average_character)

# Plot
ggplot(negative_words, aes(x = average_character, y = avg_negative_lines_per_act, label = act)) +
  geom_point(color = "blue", size = 3) +
  geom_text(vjust = -1, size = 3) +
  labs(
    x = "Average String Length",
    y = "Average Negative Lines (Proportion)",
    title = "Proportion of Negative Lines vs. Average String Length",
    alt = "A scatter plot with average dialogue length on the x-axis and proportion of negative lines on the y-axis, labeled by act."
  ) +
  theme_minimal()
```

Figure 2. Proportion of Negative Lines vs. Average String Length This plot shows that even after accounting for the number of lines in each act (by using proportions), the trend remains similar. Act II still stands out as the most negative—consistent with the murder of King Duncan.

By calculating the average rate of negative lines (as a proportion), we control for act length. The trend remains consistent, especially with Act II still exhibiting a high proportion of negativity—aligning with when Macbeth murders the king.

## Defining Negative Words Differently

```{r}
#| code-fold: true
#| code-summary: "Define Negative Words Differently"
#| code-fold-default: true

# New negative words: fight, hurt, die, dead
neg_lines <- macbeth |>
  mutate(blood = str_detect(dialogue, "(?i)fight|(?i)hurt|(?i)die|(?i)dead")) |>
  filter(blood) |>
  group_by(act) |>
  summarize(negative_lines_per_act = n())

# Merge with string length
negative_words <- left_join(neg_lines, average_character)

# Plot
ggplot(negative_words, aes(x = average_character, y = negative_lines_per_act, label = act)) +
  geom_point(color = "blue", size = 3) +
  geom_text(vjust = -1, size = 3) +
  labs(
    x = "Average String Length",
    y = "Total Negative Lines",
    title = "Negative Lines Using Alternate Word Set",
    alt = "A scatter plot comparing acts based on average dialogue length and number of lines with the alternate set of negative words."
  ) +
  theme_minimal()
```

Figure 3. Negative Lines Using Alternate Word Set When redefining “negative” to mean lines that include “fight”, “hurt”, “die”, or “dead”, we see a different pattern. Act V now appears as the most negative—reflecting the climactic violence and deaths in the final scenes.

By redefining negative language, the results shift. Act V now tops the list for negativity, which makes sense—this is where the final battle takes place and multiple major characters, including Macbeth and Lady Macbeth, meet their end.

## Loving Strings

```{r}
# Filter for lines by Macbeth containing "love", and extract what comes after "love"
macbeth |>
  filter(character == "Macbeth") |>
  mutate(love_strings = str_extract(dialogue, "(?<=(?i)love ).+")) |>
  filter(!is.na(love_strings)) |>
  select(character:love_strings, -line_number)
```

After analyzing dark themes, I wanted to explore the opposite. Has Macbeth ever spoken about love? I filtered the data to include only lines spoken by Macbeth and used a lookaround regular expression to extract any text that follows the word "love". Disappointingly, such expressions occurred only four times—and most were general in tone (e.g., during toasts), rather than personal or romantic. Poor Lady Macbeth.

### Data Citations

TidyTuesday Dataset URL: <https://github.com/rfordatascience/tidytuesday/tree/main/data/2024/2024-09-17> Author: TidyTuesday \| Community Title: Macbeth Dialogue \| Dataset Publication Source: GitHub (R for Data Science Learning Community), 2024

Original Text Source URL: <https://shakespeare.mit.edu/macbeth/full.html> Editor: MIT Shakespeare \| Title: The Complete Works of William Shakespeare \| Publication Source: MIT, Public Domain

### Data Origin and Purpose

The data was collected and shared by the R4DS (R for Data Science) Online Learning Community as part of their weekly TidyTuesday project. These datasets are curated to help learners practice data wrangling, visualization, and storytelling using real-world datasets. The Shakespeare dataset was sourced from MIT's public domain archive and restructured into a tabular format for easier analysis and visualization.
